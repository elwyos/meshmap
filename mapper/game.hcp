//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include shingle roengl.muldraw shing.boxtree consi.canosi
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include "../geo/shp.cl.hpp"
#include "../geo/meshblocks.cl.hpp"
#include "../geo/processed_shape.cl.hpp"
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
DECLcanosi(details_canosi);
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class TestClothPoint
   Quaternion quat;
   Point2D clothlean;
   float anglediff; // up to 180 eh?
   float distancepoint;
   Coord3D pos;
   float padding; // pad to 48 bytes
   //Quaternion invquat; // save up on calculation eh?
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Suburb
   
   FloatRect2D ztorect
   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Meshy

   Game * game

   uint64_t mbnum
   MeshBlock * mb // mb data from mbhost
   PostCode * postcode;
   SA1Data * sa1data;
   
   
   FloatRect2D rect
   
   RVARange mainrange
   RVARange flatrange // for popups and stuff drawing
   
   // the attributes on main
   ColorInfo main_color
   float main_height
   
   ChasingFloat popness;
   bool hover_active
   
   float last_hover_dist
   
   /\/ uNSORTED /\/

      Meshy();
      update();
      deactivate();
      activate();
      drawHoverSmulPart(RVA& bigrva);
      recolor();
      reheight();

   
   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Game
   
   Consi::Consi * detailscontainer = NULL;
   Meshy * last_detailed
   int detail_focus_counter = 0;
   Xnl has_focus_xnl;
   
   // let's just get boundaries in
   RVA mainrva;
   bool mainrva_needresynmc
   
   RVA flatrva;
   
   MBHost mbhost
   
   FloatRect2D total_rect
   
   schmap<uint64_t, Meshy> meshies
   Shing::Boxtree<Meshy*> meshytree
   
   set<Meshy*> activehovers
   Meshy * closesthover
   Point2D last_flatmouse
   
   //ShapeFile shp
   ProcessedShapeFile psf
   
   int current_age; // goes all the way to 120
   
   /\/ uNSORTED /\/

      handleTouchEvent(const TouchInfo& tinfoil) -> bool;
      draw2D();
      draw3D();
      update();
      drawPostParticles();
      drawPostWave();
      handleMarsTap(const TouchInfo& tinfoil);
      setup();
      print();
      Game();
      localiseNSWPos(const Point2D& lepos) -> Point2D;
      initMeshies();
      maybeResyncMeshVBO();
      initCanosi();
      syncDetailFocus();
      
      
      // greenColorMode(function<float(MeshBlock&, SA1Data&)> lefunc);
      // redColorMode(function<float(MeshBlock&, SA1Data&)> lefunc);
      // blueColorMode(function<float(MeshBlock&, SA1Data&)> lefunc);
      // heightColorMode(function<float(MeshBlock&, SA1Data&)> lefunc);
      // heightMode(function<float(MeshBlock&, SA1Data&)> lefunc);
      initColorizers();
      greenColorMode(function<float(MeshBlock&, SA1Data&, SA2Data&)> lefunc);
      redColorMode(function<float(MeshBlock&, SA1Data&, SA2Data&)> lefunc);
      blueColorMode(function<float(MeshBlock&, SA1Data&, SA2Data&)> lefunc);
      heightMode(function<float(MeshBlock&, SA1Data&, SA2Data&)> lefunc);
      colorizeMode(const ColorInfo& lecol, function<float(MeshBlock&, SA1Data&, SA2Data&)> lefunc);
      applyMode(eostri mode, function<float(MeshBlock&, SA1Data&, SA2Data&)> lefunc);
      showAge(int theage);

   
   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
DECLshingle(game, Game);
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
