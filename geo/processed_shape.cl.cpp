////////////////////////////////////////////////////////////
#include "../shing/moremath.hpp"
#include "../shing/schfile.hpp"
#include "processed_shape.cl.hpp"
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////
ProcessedRecord::ProcessedRecord(){
   initflec();
}
////////////////////////////////////////////////////////////
void ProcessedRecord::initflec(){
   flector_defstart(2)
      flector_vecfield(attribs).fromVersion(2);
      flector_vecfield(points).fromVersion(2);
      flector_vecfield(poly_indices).fromVersion(2);
      flector_field(range).fromVersion(2);
      flector_field(fillrate).fromVersion(2);
   flector_defend
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////
ProcessedShapeFile::ProcessedShapeFile(){
   initflec();
}
////////////////////////////////////////////////////////////
void ProcessedShapeFile::initflec(){
   flector_defstart(2)
      flector_vecfield(records).fromVersion(2);
      flector_field(ranges).fromVersion(2);
   flector_defend
}
////////////////////////////////////////////////////////////
void ProcessedShapeFile::loadFile(const schfile& leschfile){
   flector_loadfile(leschfile);
}
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void ProcessedShapeFile::saveFile(const schfile& leschfile){
   flector_savefile(leschfile);
}
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Point2D ProcessedShapeFile::ztoise(float x, float y){
   Point2D ret;
   ret.x = (x - ranges.topleft.x) / ranges.width();
   ret.y = (y - ranges.topleft.y) / ranges.height();
   return ret;
}
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Point2D ProcessedShapeFile::ztoise(const Point2D& lepos){
   Point2D ret;
   ret.x = (lepos.x - ranges.topleft.x) / ranges.width();
   ret.y = (lepos.y - ranges.topleft.y) / ranges.height();
   return ret;
}
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
FloatRect2D ProcessedShapeFile::ztoise(const FloatRect2D& lerect){
   return FloatRect2D(ztoise(lerect.topleft), ztoise(lerect.botright));
}
////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
