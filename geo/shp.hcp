//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include fileparser eostri moremath shing.stats
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include "shp_structs.hpp"
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class FileSHPHeaderRanges
   double min_x;
   double min_y;
   double max_x;
   double max_y;
   
   double min_z;
   double max_z;
   
   double min_m;
   double max_m;

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class FileSHPRec
   int record_num // big endian
   int record_len // big endian
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Record
   int recnum
   int shapetype_num
   eostri shapetype
   shringer contentrange
   bool content_errored
   
   // polygon data
   double min_x
   double min_y
   double max_x
   double max_y
   
   FloatRect2D zto_ranges
      // min_x synced to the shapefile's range
   
   vector<Point2D> points
   vector<Point2D> ztopoints
   
   vector<uint32_t> parts
   
   vector<shringer> fieldvalues;
   
   float fillrate; // 0.5 = polygon only caontains half
   
   float original_area // in points size
   int max_reducted_size;

   /\/ uNSORTED /\/

      // loadPolygon();
      loadPolygon(ShapeFile& master);
      // cullPolygonEdges(ShapeFile& master);
      cullPolygonEdges(ShapeFile& master, float dotnum);
      neoCullStep(float max_percent_diff) -> bool;
      performNeoCulling(ShapeFile& master, float max_percent_diff);
      massCullStep(float max_percent_diff) -> bool;

   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class FieldDesc
   string name
   char type
      // c = character string, space padded, d = date (YYYYMMDD)
      // F = float (floating point nunber, stored as string)
      // N = numeric (same as float??)
      // L = logical (YyNnTtFf) ? is uninitialized
   int length // number of bytes used by the field in each record
   int decimalcount
   
   set<uint64_t> possible_hashes;
   set<string> possible_values_collection; // just up to 50

   /\/ uNSORTED /\/

      regPossibleValue(const shringer& lestr);
      printSummary();

   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class ShapeFile
   
   Shing::FileParser shp_fp
   
   Shing::FileParser dbf_fp
   
   int32_t header_filecode;
   int32_t header_filelen; // specified
   int32_t header_version;
   int32_t header_shapetype_num;
   eostri header_shapetype
   
   // ---------------------------------------
   // usable data
   vector<Record> records
   set<eostri> encountered_shapetypes;
   set<int> unknown_types_encountered;
   
   // dbase file
   uint8_t dbase_version_num;
   string dbase_version_name;
   
   int dbase_record_bytes_total;
   int dbase_record_count;
   
   vector<FieldDesc> fielddescs
   FileSHPHeaderRanges headerranges
   
   int original_pointcount
   int postculled_pointcount
   
   // ---------------------------------------
   // usable data
   FloatRect2D geo_range
   

   /\/ uNSORTED /\/

      // SHPFile();
      load(const schfile& theschfile);
      shapeTypeName(int thenum) -> eostri;
      ShapeFile();
      // errored();
      printErrors();
      errored() -> bool;
      syncDbaseVersionName();
      loadDbf(const schfile& theschfile);
      loadShp(const schfile& theschfile);
      testPrint();
      // ztoise(double x, double y) -> Point2D;
      saveTo(ProcessedShapeFile& outfile);
      // ztoise(float x, float y) -> Point2D;
      // ztoise(const Point2D& lepos) -> Point2D;
      ztoise(double x, double y) -> Point2D;
      // cullPolygonEdges();
      filterContains(int fieldindex, const string& thefilter);
      filterStarts(int fieldindex, const string& thefilter);
      recalculateBounds();
      determineFillRate();
      cullPolygonEdges(float dotnum);
      colsToCSV(vector<int> columns);
      neoCullEdges(float max_perc_diff);

   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
