//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include flector
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
ProcessedShapeFile/loadFile(const schfile& leschfile)
   flector_loadfile(leschfile);
//////////////////////////////////////////////////////////////////////////////////////////
ProcessedShapeFile/saveFile(const schfile& leschfile)
   flector_savefile(leschfile);

//////////////////////////////////////////////////////////////////////////////////////////
ProcessedShapeFile/ztoise(float x, float y) -> Point2D
   Point2D ret;
   ret.x = (x - ranges.topleft.x) / ranges.width();
   ret.y = (y - ranges.topleft.y) / ranges.height();
   return ret;
//////////////////////////////////////////////////////////////////////////////////////////
ProcessedShapeFile/ztoise(const Point2D& lepos) -> Point2D
   Point2D ret;
   ret.x = (lepos.x - ranges.topleft.x) / ranges.width();
   ret.y = (lepos.y - ranges.topleft.y) / ranges.height();
   return ret;
//////////////////////////////////////////////////////////////////////////////////////////
ProcessedShapeFile/ztoise(const FloatRect2D& lerect) -> FloatRect2D
   return FloatRect2D(ztoise(lerect.topleft), ztoise(lerect.botright));
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
