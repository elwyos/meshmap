//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include moremath flectordefs
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
flec_class ProcessedRecord
   
   vector<string> attribs; // node attribs. gonna have to allocate a lot for these, but yeah
   
   vector<Point2D> points
   vector<int> poly_indices
   FloatRect2D range // not zto
   float fillrate
   
//////////////////////////////////////////////////////////////////////////////////////////
flec_class ProcessedShapeFile
   
   vector<ProcessedRecord> records
   FloatRect2D ranges

   /\/ uNSORTED /\/

      loadFile(const schfile& leschfile);
      saveFile(const schfile& leschfile);
      // ztoise(double x, double y) -> Point2D;
      ztoise(float x, float y) -> Point2D;
      ztoise(const Point2D& lepos) -> Point2D;
      ztoise(const FloatRect2D& lerect) -> FloatRect2D;

   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
